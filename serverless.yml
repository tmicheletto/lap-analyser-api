service: lap-analyser-api

provider:
  name: aws
  profile: serverless-admin
  runtime: nodejs4.3
  region: ap-southeast-2
  stage: dev
  environment:
    SESSIONS_TABLE_NAME: ${self:custom.sessionsTableName}
    SESSIONS_BUCKET_NAME: ${self:custom.sessionsBucketName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - '/'
          - - Fn::Join:
              - ':'
              - - 'arn:aws:dynamodb'
                - Ref: 'AWS::Region'
                - Ref: 'AWS::AccountId'
                - 'table'
            - Ref: SessionsDynamoDbTable
    - Effect: "Allow"
      Action:
        - '*'
      Resource:
        - 'arn:aws:s3:::${self:custom.sessionsBucketName}/*'
custom:
  sessionsTableName: ${self:service}-sessions-${opt:stage}
  sessionsBucketName: ${self:service}-session-data-${opt:stage}
functions:
  createSession:
    handler: src/functions/create-session.handler
    name: ${self:service}-create-session-${opt:stage}
    events:
      - http:
          path: sessions
          method: post
          cors: true
  getAllSessions:
    handler: src/functions/get-all-sessions.handler
    name: ${self:service}-get-all-sessions-${opt:stage}
    events:
      - http:
          path: sessions
          method: get
          cors: true
  getSessionById:
    handler: src/functions/get-session-by-id.handler
    name: ${self:service}-get-session-by-id-${opt:stage}
    events:
      - http:
          path: sessions/{id}
          method: get
          cors: true
  updateSession:
    handler: src/functions/update-session.handler
    name: ${self:service}-update-session-${opt:stage}
    events:
      - http:
          path: sessions/{id}
          method: put
          cors: true
  deleteSession:
    handler: src/functions/delete-session.handler
    name: ${self:service}-delete-session-${opt:stage}
    events:
      - http:
          path: sessions/{id}
          method: delete
          cors: true

resources:
  Resources:
    SessionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.sessionsTableName}
    SessionsDataS3Bucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:custom.sessionsBucketName}
